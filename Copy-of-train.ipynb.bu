{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.7.10-final"
    },
    "orig_nbformat": 2,
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3.7.10 64-bit ('tf': conda)",
      "metadata": {
        "interpreter": {
          "hash": "42eea32459e97d1fc562e9b561f8a94575df71e230e4ccdec5d01957082d6a36"
        }
      }
    },
    "colab": {
      "name": "Copy of train.ipynb",
      "provenance": [],
      "collapsed_sections": []
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "code",
      "metadata": {
        "id": "qqVwd40RI80_",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "63bea48c-48b7-41c4-add8-729acc9850f1"
      },
      "source": [
        "import pandas as pd\n",
        "from json_functions import create_df_simple, create_example\n",
        "\n",
        "# players_list, df = create_df('test.json')\n",
        "\n",
        "players_list, df = create_df_simple('very-big.json')"
      ],
      "execution_count": 1,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "SZx-Ece0I81B"
      },
      "source": [
        "import numpy as np\n",
        "import tensorflow as tf"
      ],
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "qCD2r_ZsI81B"
      },
      "source": [
        "features, outputs = df[\"rosters vector\"], df['rating vector']\n",
        "\n",
        "features = pd.DataFrame(features.values.tolist(), index= df.index)\n",
        "outputs = pd.DataFrame(outputs.values.tolist(), index= df.index)"
      ],
      "execution_count": 4,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "7MDDOrMtI81C"
      },
      "source": [
        "def load_array(data_arrays, batch_size, is_train=True):  #@save\n",
        "    \"\"\"Construct a TensorFlow data iterator.\"\"\"\n",
        "    dataset = tf.data.Dataset.from_tensor_slices(data_arrays)\n",
        "    if is_train:\n",
        "        dataset = dataset.shuffle(buffer_size=1000)\n",
        "    dataset = dataset.batch(batch_size)\n",
        "    return dataset\n",
        "\n",
        "batch_size = 10\n",
        "data_iter = load_array((features, outputs), batch_size)"
      ],
      "execution_count": 5,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "oI9-2-fg3dws"
      },
      "source": [
        "import tensorflow as tf"
      ],
      "execution_count": 6,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8bmWJrUy3kpo",
        "outputId": "b7eb1529-97f3-4844-ed8e-7e24d619e483"
      },
      "source": [
        "# Set up use GPU\n",
        "# physical_devices = tf.config.experimental.list_physical_devices('GPU')\n",
        "# print(\"Num GPUs available: \", len(physical_devices))\n",
        "# tf.config.experimental.set_memory_growth(physical_devices[0], True)"
      ],
      "execution_count": 8,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": 9,
      "metadata": {},
      "outputs": [],
      "source": [
        "from tensorflow import keras\n",
        "from tensorflow.keras.models import Sequential\n",
        "from tensorflow.keras.layers import Dense, Activation\n",
        "from tensorflow.keras.optimizers import Adam\n",
        "from tensorflow.keras.metrics import categorical_crossentropy"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "AN87P80d3rMH"
      },
      "source": [
        "# get the model\n",
        "def get_model(n_inputs, n_outputs):\n",
        "\tmodel = Sequential()\n",
        "\tmodel.add(Dense(100, input_dim=n_inputs, kernel_initializer='he_uniform', activation='relu'))\n",
        "\tmodel.add(Dense(50, input_dim=n_inputs, kernel_initializer='he_uniform', activation='relu'))\n",
        "\tmodel.add(Dense(n_outputs))\n",
        "\tmodel.compile(loss='mae', optimizer='adam')\n",
        "\treturn model"
      ],
      "execution_count": 18,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Yr4UPEli35Mz"
      },
      "source": [
        "n_inputs, n_outputs = features.shape[1], outputs.shape[1]"
      ],
      "execution_count": 19,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "iyAKrxvm43La"
      },
      "source": [
        "model = get_model(n_inputs, n_outputs)"
      ],
      "execution_count": 20,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "tk14QRAs4-zQ"
      },
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "X_train, X_test, y_train, y_test = train_test_split(features, outputs, test_size=0.33, random_state=42)"
      ],
      "execution_count": 21,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "TbkAW5825PMv",
        "outputId": "e154f5c4-34ae-46c0-d615-067bb494a61a"
      },
      "source": [
        "model.fit(X_train, y_train, verbose=1, epochs=100)\n",
        "mae = model.evaluate(X_test, y_test, verbose=1)"
      ],
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/100\n",
            "184/184 [==============================] - 1s 3ms/step - loss: 0.4777\n",
            "Epoch 2/100\n",
            "184/184 [==============================] - 1s 3ms/step - loss: 0.1930\n",
            "Epoch 3/100\n",
            "184/184 [==============================] - 1s 3ms/step - loss: 0.1863\n",
            "Epoch 4/100\n",
            "184/184 [==============================] - 1s 3ms/step - loss: 0.1793\n",
            "Epoch 5/100\n",
            "184/184 [==============================] - 1s 3ms/step - loss: 0.1747\n",
            "Epoch 6/100\n",
            "184/184 [==============================] - 1s 3ms/step - loss: 0.1683\n",
            "Epoch 7/100\n",
            "184/184 [==============================] - 1s 3ms/step - loss: 0.1672\n",
            "Epoch 8/100\n",
            "184/184 [==============================] - 1s 3ms/step - loss: 0.1646\n",
            "Epoch 9/100\n",
            "184/184 [==============================] - 1s 3ms/step - loss: 0.1587\n",
            "Epoch 10/100\n",
            "184/184 [==============================] - 1s 3ms/step - loss: 0.1589\n",
            "Epoch 11/100\n",
            "184/184 [==============================] - 1s 3ms/step - loss: 0.1551\n",
            "Epoch 12/100\n",
            "184/184 [==============================] - 1s 3ms/step - loss: 0.1570\n",
            "Epoch 13/100\n",
            "184/184 [==============================] - 1s 3ms/step - loss: 0.1513\n",
            "Epoch 14/100\n",
            "184/184 [==============================] - 1s 3ms/step - loss: 0.1525\n",
            "Epoch 15/100\n",
            "184/184 [==============================] - 1s 3ms/step - loss: 0.1509\n",
            "Epoch 16/100\n",
            "184/184 [==============================] - 1s 3ms/step - loss: 0.1490\n",
            "Epoch 17/100\n",
            "184/184 [==============================] - 1s 3ms/step - loss: 0.1466\n",
            "Epoch 18/100\n",
            "184/184 [==============================] - 1s 3ms/step - loss: 0.1455\n",
            "Epoch 19/100\n",
            "184/184 [==============================] - 1s 3ms/step - loss: 0.1441\n",
            "Epoch 20/100\n",
            "184/184 [==============================] - 1s 3ms/step - loss: 0.1434\n",
            "Epoch 21/100\n",
            "184/184 [==============================] - 1s 3ms/step - loss: 0.1425\n",
            "Epoch 22/100\n",
            "184/184 [==============================] - 1s 3ms/step - loss: 0.1439\n",
            "Epoch 23/100\n",
            "184/184 [==============================] - 1s 3ms/step - loss: 0.1436\n",
            "Epoch 24/100\n",
            "184/184 [==============================] - 1s 3ms/step - loss: 0.1405\n",
            "Epoch 25/100\n",
            "184/184 [==============================] - 1s 3ms/step - loss: 0.1443\n",
            "Epoch 26/100\n",
            "184/184 [==============================] - 1s 3ms/step - loss: 0.1411\n",
            "Epoch 27/100\n",
            "184/184 [==============================] - 1s 3ms/step - loss: 0.1394\n",
            "Epoch 28/100\n",
            "184/184 [==============================] - 1s 3ms/step - loss: 0.1392\n",
            "Epoch 29/100\n",
            "184/184 [==============================] - 1s 3ms/step - loss: 0.1393\n",
            "Epoch 30/100\n",
            "184/184 [==============================] - 1s 4ms/step - loss: 0.1378\n",
            "Epoch 31/100\n",
            "184/184 [==============================] - 1s 3ms/step - loss: 0.1383\n",
            "Epoch 32/100\n",
            "184/184 [==============================] - 1s 4ms/step - loss: 0.1397\n",
            "Epoch 33/100\n",
            "184/184 [==============================] - 1s 3ms/step - loss: 0.1346\n",
            "Epoch 34/100\n",
            "184/184 [==============================] - 1s 3ms/step - loss: 0.1357\n",
            "Epoch 35/100\n",
            "184/184 [==============================] - 1s 3ms/step - loss: 0.1372\n",
            "Epoch 36/100\n",
            "184/184 [==============================] - 1s 4ms/step - loss: 0.1350\n",
            "Epoch 37/100\n",
            "184/184 [==============================] - 1s 5ms/step - loss: 0.1359\n",
            "Epoch 38/100\n",
            "184/184 [==============================] - 1s 3ms/step - loss: 0.1346\n",
            "Epoch 39/100\n",
            "184/184 [==============================] - 1s 4ms/step - loss: 0.1339\n",
            "Epoch 40/100\n",
            "184/184 [==============================] - 1s 5ms/step - loss: 0.1333\n",
            "Epoch 41/100\n",
            "184/184 [==============================] - 1s 5ms/step - loss: 0.1348\n",
            "Epoch 42/100\n",
            "184/184 [==============================] - 1s 4ms/step - loss: 0.1366\n",
            "Epoch 43/100\n",
            "184/184 [==============================] - 1s 4ms/step - loss: 0.1318\n",
            "Epoch 44/100\n",
            "184/184 [==============================] - 1s 4ms/step - loss: 0.1314\n",
            "Epoch 45/100\n",
            "184/184 [==============================] - 1s 6ms/step - loss: 0.1340\n",
            "Epoch 46/100\n",
            "184/184 [==============================] - 1s 5ms/step - loss: 0.1329\n",
            "Epoch 47/100\n",
            "184/184 [==============================] - 1s 6ms/step - loss: 0.1328\n",
            "Epoch 48/100\n",
            "184/184 [==============================] - 1s 5ms/step - loss: 0.1331\n",
            "Epoch 49/100\n",
            "184/184 [==============================] - 1s 3ms/step - loss: 0.1327\n",
            "Epoch 50/100\n",
            "184/184 [==============================] - 1s 3ms/step - loss: 0.1333\n",
            "Epoch 51/100\n",
            "184/184 [==============================] - 1s 4ms/step - loss: 0.1324\n",
            "Epoch 52/100\n",
            "184/184 [==============================] - 1s 5ms/step - loss: 0.1302\n",
            "Epoch 53/100\n",
            "184/184 [==============================] - 1s 4ms/step - loss: 0.1335\n",
            "Epoch 54/100\n",
            "184/184 [==============================] - 1s 4ms/step - loss: 0.1327\n",
            "Epoch 55/100\n",
            "184/184 [==============================] - 1s 5ms/step - loss: 0.1297\n",
            "Epoch 56/100\n",
            "184/184 [==============================] - 1s 4ms/step - loss: 0.1320\n",
            "Epoch 57/100\n",
            "184/184 [==============================] - 1s 4ms/step - loss: 0.1307\n",
            "Epoch 58/100\n",
            "184/184 [==============================] - 1s 4ms/step - loss: 0.1330\n",
            "Epoch 59/100\n",
            "184/184 [==============================] - 1s 3ms/step - loss: 0.1320\n",
            "Epoch 60/100\n",
            "184/184 [==============================] - 1s 3ms/step - loss: 0.1319\n",
            "Epoch 61/100\n",
            "184/184 [==============================] - 1s 4ms/step - loss: 0.1296\n",
            "Epoch 62/100\n",
            "184/184 [==============================] - 1s 3ms/step - loss: 0.1281\n",
            "Epoch 63/100\n",
            "184/184 [==============================] - 1s 3ms/step - loss: 0.1316\n",
            "Epoch 64/100\n",
            "184/184 [==============================] - 1s 3ms/step - loss: 0.1317\n",
            "Epoch 65/100\n",
            "184/184 [==============================] - 1s 3ms/step - loss: 0.1329\n",
            "Epoch 66/100\n",
            "184/184 [==============================] - 1s 4ms/step - loss: 0.1308\n",
            "Epoch 67/100\n",
            "184/184 [==============================] - 1s 4ms/step - loss: 0.1302\n",
            "Epoch 68/100\n",
            "184/184 [==============================] - 1s 3ms/step - loss: 0.1286\n",
            "Epoch 69/100\n",
            "184/184 [==============================] - 1s 3ms/step - loss: 0.1266\n",
            "Epoch 70/100\n",
            "184/184 [==============================] - 1s 3ms/step - loss: 0.1258\n",
            "Epoch 71/100\n",
            "184/184 [==============================] - 1s 3ms/step - loss: 0.1270\n",
            "Epoch 72/100\n",
            "184/184 [==============================] - 1s 3ms/step - loss: 0.1293\n",
            "Epoch 73/100\n",
            "184/184 [==============================] - 1s 3ms/step - loss: 0.1292\n",
            "Epoch 74/100\n",
            "184/184 [==============================] - 1s 4ms/step - loss: 0.1288\n",
            "Epoch 75/100\n",
            "184/184 [==============================] - 1s 4ms/step - loss: 0.1298\n",
            "Epoch 76/100\n",
            "184/184 [==============================] - 1s 5ms/step - loss: 0.1276\n",
            "Epoch 77/100\n",
            "184/184 [==============================] - 1s 5ms/step - loss: 0.1258\n",
            "Epoch 78/100\n",
            "184/184 [==============================] - 1s 5ms/step - loss: 0.1279\n",
            "Epoch 79/100\n",
            "184/184 [==============================] - 1s 5ms/step - loss: 0.1291\n",
            "Epoch 80/100\n",
            "184/184 [==============================] - 1s 6ms/step - loss: 0.1286\n",
            "Epoch 81/100\n",
            "184/184 [==============================] - 1s 4ms/step - loss: 0.1254\n",
            "Epoch 82/100\n",
            "184/184 [==============================] - 1s 4ms/step - loss: 0.1274\n",
            "Epoch 83/100\n",
            "184/184 [==============================] - 1s 3ms/step - loss: 0.1308\n",
            "Epoch 84/100\n",
            "184/184 [==============================] - 1s 3ms/step - loss: 0.1282\n",
            "Epoch 85/100\n",
            "184/184 [==============================] - 1s 3ms/step - loss: 0.1272\n",
            "Epoch 86/100\n",
            "184/184 [==============================] - 1s 3ms/step - loss: 0.1296\n",
            "Epoch 87/100\n",
            "184/184 [==============================] - 1s 4ms/step - loss: 0.1263\n",
            "Epoch 88/100\n",
            "184/184 [==============================] - 1s 6ms/step - loss: 0.1296\n",
            "Epoch 89/100\n",
            "184/184 [==============================] - 1s 4ms/step - loss: 0.1272\n",
            "Epoch 90/100\n",
            "184/184 [==============================] - 1s 4ms/step - loss: 0.1260\n",
            "Epoch 91/100\n",
            "184/184 [==============================] - 1s 4ms/step - loss: 0.1281\n",
            "Epoch 92/100\n",
            "184/184 [==============================] - 1s 4ms/step - loss: 0.1254\n",
            "Epoch 93/100\n",
            "184/184 [==============================] - 1s 5ms/step - loss: 0.1262\n",
            "Epoch 94/100\n",
            "184/184 [==============================] - 1s 4ms/step - loss: 0.1292\n",
            "Epoch 95/100\n",
            "184/184 [==============================] - 1s 5ms/step - loss: 0.1268\n",
            "Epoch 96/100\n",
            "184/184 [==============================] - 1s 5ms/step - loss: 0.1254\n",
            "Epoch 97/100\n",
            "184/184 [==============================] - 1s 5ms/step - loss: 0.1275\n",
            "Epoch 98/100\n",
            "184/184 [==============================] - 1s 4ms/step - loss: 0.1250\n",
            "Epoch 99/100\n",
            "184/184 [==============================] - 1s 5ms/step - loss: 0.1265\n",
            "Epoch 100/100\n",
            "184/184 [==============================] - 1s 5ms/step - loss: 0.1253\n",
            "91/91 [==============================] - 0s 3ms/step - loss: 0.2226\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "o_cGuksS5lwq"
      },
      "source": [
        "tf.config.list_physical_devices('GPU')"
      ],
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[PhysicalDevice(name='/physical_device:GPU:0', device_type='GPU')]"
            ]
          },
          "metadata": {},
          "execution_count": 17
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "EtXIWyjs6Ah5"
      },
      "source": [
        "model.summary()"
      ],
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model: \"sequential_1\"\n_________________________________________________________________\nLayer (type)                 Output Shape              Param #   \n=================================================================\ndense_3 (Dense)              (None, 100)               106900    \n_________________________________________________________________\ndense_4 (Dense)              (None, 50)                5050      \n_________________________________________________________________\ndense_5 (Dense)              (None, 10)                510       \n=================================================================\nTotal params: 112,460\nTrainable params: 112,460\nNon-trainable params: 0\n_________________________________________________________________\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 26,
      "metadata": {},
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[1.0437515 , 1.0912896 , 0.7971262 , 0.7169643 , 0.61621076,\n",
              "        1.6940743 , 1.4507071 , 1.166726  , 0.9371377 , 0.82347596]],\n",
              "      dtype=float32)"
            ]
          },
          "metadata": {},
          "execution_count": 26
        }
      ],
      "source": [
        "example = create_example(['EliGE', 'Stewie2K', 'Grim', 'FalleN', 'NAF'], ['device', 'Xyp9x', 'Magisk', 'dupreeh', 'gla1ve'], players_list)\n",
        "model.predict(np.asarray([example]))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 42,
      "metadata": {},
      "outputs": [],
      "source": [
        "def print_prediction(example, players_list, model):\n",
        "    player_indices = [i for i, x in enumerate(example) if x == 1]\n",
        "    example_formatted = np.asarray([example])\n",
        "    pred = model.predict(example_formatted)\n",
        "    print(\"Predicted rating vector:\", pred[0])\n",
        "\n",
        "    print(\"Team 1:\")\n",
        "    for player in player_indices[0:5]:\n",
        "        print(players_list[player]+', ', end='')\n",
        "    print(\"\\nRating spread:\")\n",
        "    for i in range(0, 5):\n",
        "        print(round(pred[0][i], 2))\n",
        "    print(\"Team 2:\")\n",
        "    for player in player_indices[5:10]:\n",
        "        print(players_list[player-len(players_list)]+', ', end='')\n",
        "    print(\"\\nRating spread:\")\n",
        "    for i in range(5, 10):\n",
        "        print(round(pred[0][i], 2))\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 43,
      "metadata": {},
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Predicted rating vector: [1.0437515  1.0912896  0.7971262  0.7169643  0.61621076 1.6940743\n 1.4507071  1.166726   0.9371377  0.82347596]\nTeam 1:\nEliGE, NAF, Stewie2K, FalleN, Grim, \nRating spread:\n1.04\n1.09\n0.8\n0.72\n0.62\nTeam 2:\ndevice, dupreeh, Xyp9x, gla1ve, Magisk, \nRating spread:\n1.69\n1.45\n1.17\n0.94\n0.82\n"
          ]
        }
      ],
      "source": [
        "# This model unfortunately isn't able to predict rating by player, just the spread of rating for the team.\n",
        "print_prediction(example, players_list, model)"
      ]
    },
    {
      "source": [
        "Compare these results to a couple real matches played between these two teams on March 26th that the model hasn't seen:\n",
        "\n",
        "https://www.hltv.org/stats/matches/mapstatsid/117239/liquid-vs-astralis?rankingFilter=Top10\n",
        "\n",
        "https://www.hltv.org/stats/matches/mapstatsid/117231/astralis-vs-liquid?rankingFilter=Top10"
      ],
      "cell_type": "markdown",
      "metadata": {}
    }
  ]
}